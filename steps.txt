steps for creating simple message

#get message from request body

#get the user id of friend from request params 

#search for user in User database of same userid recieved from friend .this will be reciver

#get the sender details from req.user

#now create a simple message with all the details



Steps from expense message for single chat


#get amount,description,place from req.body

#get sender from req.user

#get all reciever from params

#now create an expense message document with all deatails





Sending a simple message


#








import React, { useState, useCallback } from "react";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  useDisclosure,
  Avatar,
  Badge,
} from "@nextui-org/react";
import { HiUserGroup } from "react-icons/hi";
import { MdDescription } from "react-icons/md";
import { IoMdPersonAdd } from "react-icons/io";
import { FaFaceSadTear } from "react-icons/fa6";
import { UserAPIs } from "../APIcalls/UserAPIs";
import _ from "lodash";
import { useForm } from "react-hook-form";
import groupChatAPIs from "../APIcalls/groupChatAPIs";

function CreateGroup() {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [selectedImage, setSelectedImage] = useState(null); 
  const [existingUsers, setExistingUsers] = useState([]);
  const [groupMembers, setGroupMembers] = useState([]);
  const [name, setName] = useState("");
  const [groupName,setGroupName]= useState("");
  const [description,setDescription]=useState("");
  const userAPIInstance = new UserAPIs();
  const {register,handleSubmit} = useForm()

  const debounceSearch = useCallback(
    _.debounce(async (name) => {
      if (name) {
        try {
          const response = await userAPIInstance.suggestUser({ name });
          // console.log("Suggested users:", response.data);
          setExistingUsers(response.data);
          // return response.data;
        } catch (error) {
          console.error("Error while searching for contacts:", error);
        }
      }
    }, 500),
    []
  );

  const handleSuggestedUser = (user) => {
    setName("");
    setGroupMembers([...groupMembers, user]);
  };
  // console.log(groupMembers ? "true": "false")

  // console.log("Group members:",groupMembers)

  // const handleImageChange = (e) => {
  //   const file = e.target.files[0];
  //   if (file) {
  //     // const imageUrl = URL.createObjectURL(file);
  //     const groupIcon = new FormData();
  //     groupIcon.append("groupIcon",file);
  //     setSelectedImage(groupIcon);
  //     // console.log("Image:",groupIcon)
  //   }
  // };
  

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    console.log("object")
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);
      console.log("Image:",imageUrl)
    }
  };

  const handleOpen = (backdrop) => {
    //   setBackdrop(backdrop)
    onOpen();
  };

  const handleSearch = (e) => {
    const userInput = e.target.value;
    // console.log("input value:",userInput)

    setName(userInput);
    debounceSearch(userInput);
  };

  const createGroup = async (groupData)=>{
    try {
      const formData = new FormData();
      formData.append("groupName",groupData.groupName);
      formData.append("description",groupData.description);
      formData.append("members",groupMembers);
      if(groupData.groupIcon[0]){
        formData.append("chatIcon",groupData.groupIcon)
      }
      console.log("Form Data:",formData)
      const response = await groupChatAPIs.createGroup(formData)

      if(response){
        console.log("Created group:",response)
      }
    } catch (error) {
      console.log("ERR:",error)
    }
  }

  return (
    <>
      <div className="flex flex-wrap gap-3">
        <Button
          key="opaque"
          variant="flat"
          // color='primary'
          onPress={() => handleOpen()}
          className="capitalize text-colorLevel3 bg-colorLevel4 border-none"
        >
          Create group
        </Button>
      </div>
      <Modal
        backdrop="opaque"
        isOpen={isOpen}
        onClose={onClose}
        className="dark text-foreground bg-background"
      >
        <ModalContent className="px-2 ">
          {(onClose) => (
            <> 
            <form action=""
            onSubmit={handleSubmit(createGroup)}
            >
              <ModalHeader className="flex flex-col gap-1">
                Create groupchat
              </ModalHeader>
              <ModalBody>
                <div className="w-full pb-4 flex justify-center">
                  {/* Circular container for the image */}
                  <label className="relative">
                    {/* Show either the selected image or a default circle */}
                    {selectedImage ? (
                      <Avatar
                        src={selectedImage}
                        className="w-20 h-20 text-large"
                      />
                    ) : (
                      <div className="w-20 h-20 rounded-full bg-gray-200 border-2 border-blue-500 flex items-center justify-center">
                        <span className="text-sm text-gray-500 text-center">
                          Add group icon
                        </span>
                      </div>
                    )}
                    {/* Hidden file input */}
                    <input
                      type="file"
                      id="avatar"
                      name="photo"
                      accept="image/*"
                      required
                      onChange={handleImageChange}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                        {...register("groupIcon", { required: true })}
                    />
                  </label>
                </div>

                <div className="flex ">
                  <HiUserGroup size={30} />
                  <input
                    type="text"
                    placeholder="Group name"
                    className="w-full  bg-background pl-2 text-white font-myFont text-lg font-normal   focus:outline-none border-b-2 ml-8"
                    {
                      ...register("groupName",{
                        required: true
                      })
                    }
                  />
                </div>

                <div className="flex mt-4">
                  <MdDescription size={30} />
                  <input
                    type="text"
                    placeholder="Description"
                    className="w-full  bg-background pl-2 text-white font-myFont text-lg font-normal   focus:outline-none border-b-2 ml-8"
                    {
                      ...register("description",{
                        required: true
                      })
                    }
                  />
                </div>

                <div className="flex mt-4">
                  <IoMdPersonAdd size={30} />
                  <input
                    type="text"
                    value={name}
                    placeholder="Search for contacts"
                    className="w-full  bg-background pl-2 text-white font-myFont text-lg font-normal   focus:outline-none border-b-2 ml-8"
                    onChange={handleSearch}
                  />
                </div>

                {name && (
                  <div className="w-60 h-64 ml-6 text-colorLevel3 pb-10 z-10 absolute top-4 bg-colorLevel1 overflow-y-auto rounded-md">
                    <ul className="mx-2">
                      {existingUsers.length === 0 ? (
                        <div className="flex flex-col items-center content-center my-auto w-full h-full pt-16">
                          <h1 className=" flex my-auto font-myFont text-2xl text-colorLevel4">
                            No users found
                          </h1>
                          <FaFaceSadTear
                            size={100}
                            className="text-colorLevel4 flex"
                          />
                        </div>
                      ) : (
                        existingUsers.map((user) => {
                          return (
                            <li
                              className="flex mt-3 cursor-pointer  hover:bg-colorLevel2 rounded-md w-full "
                              key={user?.mobileNo}
                              onClick={() => handleSuggestedUser(user)}
                            >
                              <Avatar
                                src={user?.avatar}
                                alt="Profile pic"
                                size="md"
                              />
                              <div className="flex justify-between px-4 mx-1  w-full border-b-2 border-colorLevel2">
                                <div className="mt-1">
                                  <h1 className="font-myFont font-normal text-md truncate">
                                    {user?.fullName}
                                  </h1>
                                </div>
                              </div>
                            </li>
                          );
                        })
                      )}
                    </ul>
                  </div>
                )}

                <div className="flex gap-3 items-center  w-full  px-4 mt-3 overflow-x-auto h-20 ">
                  <ul className="flex gap-3">
                    {groupMembers &&
                      groupMembers.map((member) => {
                        return (
                          <li key={member.mobileNo}>
                          <Badge
                          content="X"
                          color="default"
                          className="cursor-pointer"
                          onClick={()=>{
                            setGroupMembers(groupMembers.filter(Clickedmember=>Clickedmember.mobileNo !== member.mobileNo))
                          }}
                        >
                          <Avatar
                            radius="md"
                            src={member.avatar}
                          />
                        </Badge>
                        </li>
                        )
                      })}
                  </ul>
                </div>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}
                onClick={()=>{
                  // setGroupName("")
                  // setDescription("")
                  // setGroupMembers([])
                }}
                >
                  Cancel
                </Button>
                <Button color="primary" onPress={onClose}
                type="submit"
                >
                  Create
                </Button>
              </ModalFooter>
              </form>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}

export default CreateGroup;











